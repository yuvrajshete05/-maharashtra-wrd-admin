import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import toast from 'react-hot-toast'
import { ArrowLeft, Save, Send, LogOut, Crown, Trophy, Award, Star, FileCheck, Users, TrendingUp, CheckCircle2, AlertTriangle, ThumbsUp, ThumbsDown, Medal, Sparkles } from 'lucide-react'

// Browser-Only Session Manager
class BrowserSessionManager {
  static forceLogoutAdmin(): boolean {
    localStorage.removeItem('admin_active_session');
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminData');
    return true;
  }
}

// State Committee Final Evaluation Form Data
interface StateEvaluationData {
  // Application Journey Summary
  applicationId: string
  wuaName: string
  applicantName: string
  
  // Previous Evaluation Summary
  selfAssessmentScore: number
  circleCommitteeScore: number
  corporationCommitteeScore: number
  allPreviousReviewed: boolean
  
  // Final State Committee Assessment
  overallPerformanceRating: 'outstanding' | 'excellent' | 'good' | 'satisfactory' | 'below_standard'
  
  // Comprehensive Evaluation Criteria (State Level)
  // Criterion 1: Impact & Achievement (25 marks)
  waterManagementImpact: number // 0-8 marks
  communityDevelopmentImpact: number // 0-8 marks
  sustainabilityAchievements: number // 0-9 marks
  
  // Criterion 2: Leadership & Innovation (25 marks)
  leadershipExcellence: number // 0-8 marks
  innovationImplementation: number // 0-8 marks
  bestPracticesAdoption: number // 0-9 marks
  
  // Criterion 3: Governance & Transparency (25 marks)
  governanceQuality: number // 0-8 marks
  transparencyLevel: number // 0-8 marks
  accountabilityMeasures: number // 0-9 marks
  
  // Criterion 4: Future Vision & Scalability (25 marks)
  futureVisionClarity: number // 0-8 marks
  scalabilityPotential: number // 0-8 marks
  replicationValue: number // 0-9 marks
  
  // Additional State-Level Considerations
  stateSignificance: boolean
  nationalRelevance: boolean
  internationalBenchmark: boolean
  mediaAttention: boolean
  
  // Final Award Decision
  finalScore: number // Auto-calculated (max 100)
  awardCategory: 'gold' | 'silver' | 'bronze' | 'certificate' | 'none'
  awardJustification: string
  
  // Special Recognitions
  specialRecognition: string[]
  
  // State Committee Details
  chairpersonApproval: boolean
  committeeConsensus: boolean
  evaluatedBy: string
  evaluationDate: string
  finalRemarks: string
}

// Mock data for complete application journey
const mockApplicationJourney = {
  applicationId: 'WUA/MH/2024/001',
  wuaName: 'Shivaji Water User Association',
  applicantName: 'Ramesh Kumar Patil',
  district: 'Pune',
  category: 'MAJOR',
  submissionDate: '2024-01-15',
  
  // Previous evaluation results
  selfAssessmentScore: 142,
  circleCommitteeScore: 87,
  corporationCommitteeScore: 26,
  
  // Evaluation timeline
  circleEvaluationDate: '2024-02-01',
  corporationEvaluationDate: '2024-02-15',
  stateEvaluationDate: '2024-03-01',
  
  // Previous recommendations
  circleRecommendation: 'recommended',
  corporationRecommendation: 'forward_to_state'
}

export default function StateCommitteeEvaluation() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [userToken, setUserToken] = useState<string | null>(null)
  const [userData, setUserData] = useState<any>(null)
  const [currentCriterion, setCurrentCriterion] = useState(0)

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue
  } = useForm<StateEvaluationData>()

  // Watch all form values
  const watchedValues = watch()

  // Authentication check
  useEffect(() => {
    const token = localStorage.getItem('adminToken')
    const adminData = localStorage.getItem('adminData')

    if (!token || !adminData) {
      toast.error('Please login first')
      router.push('/admin/login')
      return
    }

    try {
      const parsedData = JSON.parse(adminData)
      // Check if user is authorized for state committee evaluation
      if (!['admin', 'super-admin', 'state-committee', 'chairperson'].includes(parsedData.userType || parsedData.adminLevel)) {
        toast.error('Access denied. State Committee members only.')
        router.push('/admin/dashboard')
        return
      }
      setUserToken(token)
      setUserData(parsedData)
    } catch (error) {
      console.error('Auth error:', error)
      toast.error('Invalid session')
      router.push('/admin/login')
    }
  }, [router])

  // Logout handler
  const handleLogout = () => {
    BrowserSessionManager.forceLogoutAdmin();
    toast.success('Logged out successfully');
    router.push('/admin/login');
  };

  // Calculate final score from all criteria
  const calculateFinalScore = () => {
    const criterionScores = [
      // Criterion 1: Impact & Achievement
      (watchedValues.waterManagementImpact || 0) +
      (watchedValues.communityDevelopmentImpact || 0) +
      (watchedValues.sustainabilityAchievements || 0),
      
      // Criterion 2: Leadership & Innovation
      (watchedValues.leadershipExcellence || 0) +
      (watchedValues.innovationImplementation || 0) +
      (watchedValues.bestPracticesAdoption || 0),
      
      // Criterion 3: Governance & Transparency
      (watchedValues.governanceQuality || 0) +
      (watchedValues.transparencyLevel || 0) +
      (watchedValues.accountabilityMeasures || 0),
      
      // Criterion 4: Future Vision & Scalability
      (watchedValues.futureVisionClarity || 0) +
      (watchedValues.scalabilityPotential || 0) +
      (watchedValues.replicationValue || 0)
    ]
    
    const total = criterionScores.reduce((sum, score) => sum + score, 0)
    setValue('finalScore', total)
    
    // Auto-suggest award category based on score
    let suggestedCategory = 'none'
    if (total >= 85) suggestedCategory = 'gold'
    else if (total >= 70) suggestedCategory = 'silver'
    else if (total >= 55) suggestedCategory = 'bronze'
    else if (total >= 40) suggestedCategory = 'certificate'
    
    setValue('awardCategory', suggestedCategory as any)
    
    return total
  }

  // Update final score when any criterion score changes
  useEffect(() => {
    calculateFinalScore()
  }, [watchedValues])

  // Form submission handler
  const onSubmit = async (data: StateEvaluationData) => {
    if (!userToken) {
      toast.error('Authentication required')
      return
    }

    setIsLoading(true)

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 3000))

      // Prepare final evaluation data
      const finalEvaluationData = {
        ...data,
        applicationId: mockApplicationJourney.applicationId,
        evaluatedBy: userData.name,
        evaluationDate: new Date().toISOString(),
        evaluatorType: 'state',
        stage: 'final_decision',
        
        // Complete application journey
        applicationJourney: {
          submissionDate: mockApplicationJourney.submissionDate,
          selfAssessmentScore: mockApplicationJourney.selfAssessmentScore,
          circleCommitteeScore: mockApplicationJourney.circleCommitteeScore,
          corporationCommitteeScore: mockApplicationJourney.corporationCommitteeScore,
          finalStateScore: data.finalScore
        }
      }

      console.log('Final State Committee Decision:', finalEvaluationData)
      
      const awardCategory = data.awardCategory
      if (awardCategory === 'gold') {
        toast.success('🏆 GOLD AWARD - Punyashlok Ahilyabai Holkar Award Winner!', { duration: 5000 })
      } else if (awardCategory === 'silver') {
        toast.success('🥈 SILVER AWARD - Excellence Recognition!', { duration: 4000 })
      } else if (awardCategory === 'bronze') {
        toast.success('🥉 BRONZE AWARD - Achievement Recognition!', { duration: 4000 })
      } else if (awardCategory === 'certificate') {
        toast.success('📜 CERTIFICATE OF APPRECIATION!', { duration: 3000 })
      } else {
        toast.success('Evaluation completed - Application processed')
      }
      
      setTimeout(() => {
        router.push('/admin/dashboard')
      }, 3000)

    } catch (error) {
      console.error('Submission error:', error)
      toast.error('Failed to submit final evaluation. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  // Save progress
  const saveProgress = () => {
    localStorage.setItem('state_evaluation_draft', JSON.stringify(watchedValues))
    toast.success('Final evaluation draft saved!')
  }

  // Load saved progress
  useEffect(() => {
    const savedDraft = localStorage.getItem('state_evaluation_draft')
    if (savedDraft) {
      try {
        const draft = JSON.parse(savedDraft)
        Object.keys(draft).forEach(key => {
          setValue(key as keyof StateEvaluationData, draft[key])
        })
      } catch (error) {
        console.error('Error loading draft:', error)
      }
    }
  }, [setValue])

  if (!userToken) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-white">Loading...</div>
      </div>
    )
  }

  const criteria = [
    { name: 'Impact & Achievement', icon: Trophy, maxScore: 25, color: 'text-yellow-600', bg: 'bg-yellow-50' },
    { name: 'Leadership & Innovation', icon: Star, maxScore: 25, color: 'text-blue-600', bg: 'bg-blue-50' },
    { name: 'Governance & Transparency', icon: Crown, maxScore: 25, color: 'text-purple-600', bg: 'bg-purple-50' },
    { name: 'Future Vision & Scalability', icon: Sparkles, maxScore: 25, color: 'text-green-600', bg: 'bg-green-50' }
  ]

  const finalScore = calculateFinalScore()
  const totalPossibleScore = mockApplicationJourney.selfAssessmentScore + mockApplicationJourney.circleCommitteeScore + mockApplicationJourney.corporationCommitteeScore + finalScore

  return (
    <>
      <Head>
        <title>State Committee - Final Evaluation - Maharashtra WRD</title>
        <meta name="description" content="State Committee final evaluation and award decision" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
        {/* Header */}
        <div className="bg-white/10 backdrop-blur-md border-b border-white/20">
          <div className="container mx-auto px-6 py-4 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="flex items-center text-white/80 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Dashboard
              </button>
            </div>

            <div className="flex items-center space-x-4">
              <div className="text-center">
                <h1 className="text-xl font-bold text-white flex items-center">
                  <Crown className="w-6 h-6 mr-2 text-yellow-400" />
                  State Committee - Final Evaluation
                </h1>
                <p className="text-sm text-white/70">Punyashlok Ahilyabai Holkar Award Decision</p>
              </div>
              
              <button
                onClick={handleLogout}
                className="flex items-center px-4 py-2 bg-red-600/20 hover:bg-red-600/30 text-white rounded-lg transition-colors border border-red-500/30"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </button>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-6 py-8">
          <div className="max-w-7xl mx-auto">
            {/* Application Journey Summary */}
            <div className="government-card p-8 mb-6 bg-gradient-to-r from-orange-50 to-yellow-50 border-2 border-orange-200">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-2">{mockApplicationJourney.wuaName}</h2>
                <p className="text-lg text-gray-700">Applicant: {mockApplicationJourney.applicantName}</p>
                <p className="text-sm text-gray-500">Application ID: {mockApplicationJourney.applicationId} | Category: {mockApplicationJourney.category}</p>
              </div>

              {/* Evaluation Journey Timeline */}
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                <div className="text-center p-4 bg-white/70 rounded-lg">
                  <Users className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                  <h4 className="font-semibold text-gray-800">Self-Assessment</h4>
                  <div className="text-2xl font-bold text-blue-600">{mockApplicationJourney.selfAssessmentScore}/150</div>
                  <div className="text-xs text-gray-500">{mockApplicationJourney.submissionDate}</div>
                </div>

                <div className="text-center p-4 bg-white/70 rounded-lg">
                  <FileCheck className="w-8 h-8 text-green-600 mx-auto mb-2" />
                  <h4 className="font-semibold text-gray-800">Circle Committee</h4>
                  <div className="text-2xl font-bold text-green-600">{mockApplicationJourney.circleCommitteeScore}/100</div>
                  <div className="text-xs text-gray-500">{mockApplicationJourney.circleEvaluationDate}</div>
                </div>

                <div className="text-center p-4 bg-white/70 rounded-lg">
                  <TrendingUp className="w-8 h-8 text-purple-600 mx-auto mb-2" />
                  <h4 className="font-semibold text-gray-800">Corporation Committee</h4>
                  <div className="text-2xl font-bold text-purple-600">{mockApplicationJourney.corporationCommitteeScore}/30</div>
                  <div className="text-xs text-gray-500">{mockApplicationJourney.corporationEvaluationDate}</div>
                </div>

                <div className="text-center p-4 bg-white/70 rounded-lg border-2 border-orange-300">
                  <Crown className="w-8 h-8 text-orange-600 mx-auto mb-2" />
                  <h4 className="font-semibold text-gray-800">State Committee</h4>
                  <div className="text-2xl font-bold text-orange-600">{finalScore}/100</div>
                  <div className="text-xs text-gray-500">Current Evaluation</div>
                </div>
              </div>

              {/* Overall Journey Score */}
              <div className="text-center p-6 bg-gradient-to-r from-orange-100 to-yellow-100 rounded-lg">
                <h3 className="text-lg font-semibold text-gray-800 mb-2">Complete Application Journey</h3>
                <div className="text-4xl font-bold text-orange-600 mb-1">{totalPossibleScore}/380</div>
                <div className="text-sm text-gray-600">Total Comprehensive Score</div>
                <div className="text-xs text-gray-500 mt-1">Self-Assessment (150) + Circle (100) + Corporation (30) + State (100)</div>
                
                <div className="mt-4">
                  <label className="flex items-center justify-center">
                    <input
                      type="checkbox"
                      {...register('allPreviousReviewed', { required: 'Please confirm review of all previous evaluations' })}
                      className="mr-2 text-orange-600"
                    />
                    <span className="text-sm text-gray-700">All previous evaluation stages reviewed and verified</span>
                  </label>
                </div>
              </div>
            </div>

            {/* Criterion Navigation */}
            <div className="government-card p-6 mb-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold text-gray-900">State Committee Assessment Criteria</h3>
                <div className="text-right">
                  <div className="text-3xl font-bold text-orange-600">{finalScore}/100</div>
                  <div className="text-sm text-gray-500">State Committee Score</div>
                </div>
              </div>
              
              {/* Criterion tabs */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
                {criteria.map((criterion, index) => {
                  const CriterionIcon = criterion.icon
                  return (
                    <button
                      key={index}
                      onClick={() => setCurrentCriterion(index)}
                      className={`flex flex-col items-center p-4 rounded-lg transition-colors ${
                        currentCriterion === index
                          ? 'bg-orange-600 text-white shadow-lg'
                          : `${criterion.bg} hover:bg-opacity-70 text-gray-700`
                      }`}
                    >
                      <CriterionIcon className={`w-6 h-6 mb-2 ${
                        currentCriterion === index ? 'text-white' : criterion.color
                      }`} />
                      <span className="font-medium text-sm text-center">{criterion.name}</span>
                      <span className="text-xs mt-1">({criterion.maxScore} marks)</span>
                    </button>
                  )
                })}
              </div>

              {/* Progress bar */}
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-orange-500 to-yellow-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${(finalScore / 100) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* State Committee Evaluation Form */}
            <div className="government-card p-8">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
                
                {/* Criterion 1: Impact & Achievement */}
                {currentCriterion === 0 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Trophy className="w-8 h-8 text-yellow-600 mr-3" />
                      <h3 className="text-2xl font-bold text-gray-900">Criterion 1: Impact & Achievement</h3>
                      <span className="ml-auto text-lg text-gray-500">(Max: 25 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'waterManagementImpact', 
                          label: 'Water Management Impact',
                          description: 'Measurable improvements in water management, conservation outcomes, distribution efficiency',
                          maxScore: 8
                        },
                        { 
                          key: 'communityDevelopmentImpact', 
                          label: 'Community Development Impact',
                          description: 'Social development, livelihood improvement, community empowerment achievements',
                          maxScore: 8
                        },
                        { 
                          key: 'sustainabilityAchievements', 
                          label: 'Sustainability Achievements',
                          description: 'Long-term sustainability measures, environmental benefits, resource conservation',
                          maxScore: 9
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-yellow-50 p-6 rounded-lg border border-yellow-200">
                          <h4 className="font-bold text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          <div className="text-sm font-medium text-yellow-700 mb-3">Max: {criterion.maxScore} marks</div>
                          
                          <div className="space-y-2">
                            {Array.from({length: criterion.maxScore + 1}, (_, score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof StateEvaluationData, { 
                                    required: `${criterion.label} score is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-yellow-600"
                                />
                                <span className={`text-sm ${
                                  score >= criterion.maxScore * 0.8 ? 'text-green-700 font-medium' : 
                                  score >= criterion.maxScore * 0.6 ? 'text-yellow-700' : 
                                  score >= criterion.maxScore * 0.4 ? 'text-orange-700' : 'text-red-700'
                                }`}>
                                  {score} marks
                                  {score === criterion.maxScore && ' - Outstanding'}
                                  {score === criterion.maxScore - 1 && ' - Excellent'}
                                  {score === 0 && ' - No evidence'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Criterion 2: Leadership & Innovation */}
                {currentCriterion === 1 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Star className="w-8 h-8 text-blue-600 mr-3" />
                      <h3 className="text-2xl font-bold text-gray-900">Criterion 2: Leadership & Innovation</h3>
                      <span className="ml-auto text-lg text-gray-500">(Max: 25 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'leadershipExcellence', 
                          label: 'Leadership Excellence',
                          description: 'Visionary leadership, team building, conflict resolution, member motivation',
                          maxScore: 8
                        },
                        { 
                          key: 'innovationImplementation', 
                          label: 'Innovation Implementation',
                          description: 'Creative solutions, technology adoption, process improvements, modern approaches',
                          maxScore: 8
                        },
                        { 
                          key: 'bestPracticesAdoption', 
                          label: 'Best Practices Adoption',
                          description: 'Industry best practices, learning from others, knowledge sharing, replication',
                          maxScore: 9
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-blue-50 p-6 rounded-lg border border-blue-200">
                          <h4 className="font-bold text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          <div className="text-sm font-medium text-blue-700 mb-3">Max: {criterion.maxScore} marks</div>
                          
                          <div className="space-y-2">
                            {Array.from({length: criterion.maxScore + 1}, (_, score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof StateEvaluationData, { 
                                    required: `${criterion.label} score is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-blue-600"
                                />
                                <span className={`text-sm ${
                                  score >= criterion.maxScore * 0.8 ? 'text-green-700 font-medium' : 
                                  score >= criterion.maxScore * 0.6 ? 'text-yellow-700' : 
                                  score >= criterion.maxScore * 0.4 ? 'text-orange-700' : 'text-red-700'
                                }`}>
                                  {score} marks
                                  {score === criterion.maxScore && ' - Outstanding'}
                                  {score === criterion.maxScore - 1 && ' - Excellent'}
                                  {score === 0 && ' - No evidence'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Criterion 3: Governance & Transparency */}
                {currentCriterion === 2 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Crown className="w-8 h-8 text-purple-600 mr-3" />
                      <h3 className="text-2xl font-bold text-gray-900">Criterion 3: Governance & Transparency</h3>
                      <span className="ml-auto text-lg text-gray-500">(Max: 25 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'governanceQuality', 
                          label: 'Governance Quality',
                          description: 'Democratic processes, participatory decision-making, institutional strength',
                          maxScore: 8
                        },
                        { 
                          key: 'transparencyLevel', 
                          label: 'Transparency Level',
                          description: 'Information accessibility, open meetings, public disclosure, communication',
                          maxScore: 8
                        },
                        { 
                          key: 'accountabilityMeasures', 
                          label: 'Accountability Measures',
                          description: 'Regular reporting, audit mechanisms, grievance handling, responsibility systems',
                          maxScore: 9
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-purple-50 p-6 rounded-lg border border-purple-200">
                          <h4 className="font-bold text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          <div className="text-sm font-medium text-purple-700 mb-3">Max: {criterion.maxScore} marks</div>
                          
                          <div className="space-y-2">
                            {Array.from({length: criterion.maxScore + 1}, (_, score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof StateEvaluationData, { 
                                    required: `${criterion.label} score is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-purple-600"
                                />
                                <span className={`text-sm ${
                                  score >= criterion.maxScore * 0.8 ? 'text-green-700 font-medium' : 
                                  score >= criterion.maxScore * 0.6 ? 'text-yellow-700' : 
                                  score >= criterion.maxScore * 0.4 ? 'text-orange-700' : 'text-red-700'
                                }`}>
                                  {score} marks
                                  {score === criterion.maxScore && ' - Outstanding'}
                                  {score === criterion.maxScore - 1 && ' - Excellent'}
                                  {score === 0 && ' - No evidence'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Criterion 4: Future Vision & Scalability */}
                {currentCriterion === 3 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Sparkles className="w-8 h-8 text-green-600 mr-3" />
                      <h3 className="text-2xl font-bold text-gray-900">Criterion 4: Future Vision & Scalability</h3>
                      <span className="ml-auto text-lg text-gray-500">(Max: 25 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'futureVisionClarity', 
                          label: 'Future Vision Clarity',
                          description: 'Clear long-term vision, strategic planning, future-readiness, adaptability',
                          maxScore: 8
                        },
                        { 
                          key: 'scalabilityPotential', 
                          label: 'Scalability Potential',
                          description: 'Expansion capability, growth planning, resource scaling, capacity building',
                          maxScore: 8
                        },
                        { 
                          key: 'replicationValue', 
                          label: 'Replication Value',
                          description: 'Model replication potential, knowledge transfer, template creation, inspiring others',
                          maxScore: 9
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-green-50 p-6 rounded-lg border border-green-200">
                          <h4 className="font-bold text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          <div className="text-sm font-medium text-green-700 mb-3">Max: {criterion.maxScore} marks</div>
                          
                          <div className="space-y-2">
                            {Array.from({length: criterion.maxScore + 1}, (_, score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof StateEvaluationData, { 
                                    required: `${criterion.label} score is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-green-600"
                                />
                                <span className={`text-sm ${
                                  score >= criterion.maxScore * 0.8 ? 'text-green-700 font-medium' : 
                                  score >= criterion.maxScore * 0.6 ? 'text-yellow-700' : 
                                  score >= criterion.maxScore * 0.4 ? 'text-orange-700' : 'text-red-700'
                                }`}>
                                  {score} marks
                                  {score === criterion.maxScore && ' - Outstanding'}
                                  {score === criterion.maxScore - 1 && ' - Excellent'}
                                  {score === 0 && ' - No evidence'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>

                    {/* Additional State-Level Considerations */}
                    <div className="mt-8 bg-gradient-to-br from-orange-50 to-yellow-50 p-6 rounded-lg border-2 border-orange-200">
                      <h4 className="font-bold text-gray-800 mb-4 flex items-center">
                        <Medal className="w-5 h-5 mr-2 text-orange-600" />
                        Additional State-Level Considerations
                      </h4>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-3">
                          <h5 className="font-medium text-gray-700">Recognition & Impact</h5>
                          {[
                            { key: 'stateSignificance', label: 'Significant impact at state level' },
                            { key: 'nationalRelevance', label: 'National relevance and recognition' },
                            { key: 'internationalBenchmark', label: 'International benchmark quality' },
                            { key: 'mediaAttention', label: 'Positive media attention received' }
                          ].map((item) => (
                            <label key={item.key} className="flex items-center">
                              <input
                                type="checkbox"
                                {...register(item.key as keyof StateEvaluationData)}
                                className="mr-2 text-orange-600"
                              />
                              <span className="text-sm text-gray-700">{item.label}</span>
                            </label>
                          ))}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Special Recognition Categories
                          </label>
                          <div className="space-y-2">
                            {[
                              'Innovation Excellence',
                              'Community Impact',
                              'Environmental Sustainability', 
                              'Digital Transformation',
                              'Women Empowerment',
                              'Youth Engagement'
                            ].map((recognition) => (
                              <label key={recognition} className="flex items-center">
                                <input
                                  type="checkbox"
                                  {...register('specialRecognition')}
                                  value={recognition}
                                  className="mr-2 text-orange-600"
                                />
                                <span className="text-sm text-gray-700">{recognition}</span>
                              </label>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Final Award Decision */}
                    <div className="mt-8 bg-gradient-to-br from-yellow-100 to-orange-100 p-8 rounded-lg border-2 border-yellow-300">
                      <h4 className="font-bold text-gray-800 mb-6 flex items-center text-xl">
                        <Trophy className="w-6 h-6 mr-2 text-yellow-600" />
                        Final Award Decision
                      </h4>
                      
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Final Score Display */}
                        <div className="text-center p-6 bg-white/80 rounded-lg">
                          <div className="text-5xl font-bold text-orange-600 mb-2">{finalScore}/100</div>
                          <div className="text-lg text-gray-700 mb-4">Final State Committee Score</div>
                          <div className="text-sm text-gray-500 mb-4">
                            Journey Score: {totalPossibleScore}/380
                          </div>
                          
                          {/* Performance Rating */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              Overall Performance Rating
                            </label>
                            <select
                              {...register('overallPerformanceRating', { required: 'Performance rating is required' })}
                              className="government-input text-center"
                            >
                              <option value="">Select rating</option>
                              <option value="outstanding">🏆 Outstanding</option>
                              <option value="excellent">⭐ Excellent</option>
                              <option value="good">✅ Good</option>
                              <option value="satisfactory">👍 Satisfactory</option>
                              <option value="below_standard">⚠️ Below Standard</option>
                            </select>
                          </div>
                        </div>

                        {/* Award Categories */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-4">
                            Award Category *
                          </label>
                          <div className="space-y-3">
                            <label className="flex items-center p-4 border-2 border-yellow-400 rounded-lg cursor-pointer hover:bg-yellow-50 bg-yellow-25">
                              <input
                                type="radio"
                                {...register('awardCategory', { required: 'Award category is required' })}
                                value="gold"
                                className="mr-3 text-yellow-600"
                              />
                              <div>
                                <div className="font-bold text-yellow-700 flex items-center text-lg">
                                  <Trophy className="w-5 h-5 mr-1" />
                                  GOLD AWARD
                                </div>
                                <div className="text-sm text-yellow-600">Punyashlok Ahilyabai Holkar Award Winner (85+ marks)</div>
                              </div>
                            </label>

                            <label className="flex items-center p-4 border-2 border-gray-400 rounded-lg cursor-pointer hover:bg-gray-50">
                              <input
                                type="radio"
                                {...register('awardCategory')}
                                value="silver"
                                className="mr-3 text-gray-600"
                              />
                              <div>
                                <div className="font-bold text-gray-700 flex items-center">
                                  <Medal className="w-5 h-5 mr-1" />
                                  SILVER AWARD
                                </div>
                                <div className="text-sm text-gray-600">Excellence Recognition (70-84 marks)</div>
                              </div>
                            </label>

                            <label className="flex items-center p-4 border-2 border-amber-600 rounded-lg cursor-pointer hover:bg-amber-50">
                              <input
                                type="radio"
                                {...register('awardCategory')}
                                value="bronze"
                                className="mr-3 text-amber-600"
                              />
                              <div>
                                <div className="font-bold text-amber-700 flex items-center">
                                  <Award className="w-5 h-5 mr-1" />
                                  BRONZE AWARD
                                </div>
                                <div className="text-sm text-amber-600">Achievement Recognition (55-69 marks)</div>
                              </div>
                            </label>

                            <label className="flex items-center p-4 border-2 border-blue-400 rounded-lg cursor-pointer hover:bg-blue-50">
                              <input
                                type="radio"
                                {...register('awardCategory')}
                                value="certificate"
                                className="mr-3 text-blue-600"
                              />
                              <div>
                                <div className="font-bold text-blue-700 flex items-center">
                                  <FileCheck className="w-5 h-5 mr-1" />
                                  CERTIFICATE
                                </div>
                                <div className="text-sm text-blue-600">Certificate of Appreciation (40-54 marks)</div>
                              </div>
                            </label>

                            <label className="flex items-center p-4 border-2 border-red-300 rounded-lg cursor-pointer hover:bg-red-50">
                              <input
                                type="radio"
                                {...register('awardCategory')}
                                value="none"
                                className="mr-3 text-red-600"
                              />
                              <div>
                                <div className="font-bold text-red-700 flex items-center">
                                  <AlertTriangle className="w-5 h-5 mr-1" />
                                  NO AWARD
                                </div>
                                <div className="text-sm text-red-600">Does not meet award criteria (Below 40 marks)</div>
                              </div>
                            </label>
                          </div>
                          {errors.awardCategory && (
                            <p className="mt-1 text-sm text-red-600">{errors.awardCategory.message}</p>
                          )}
                        </div>
                      </div>

                      {/* Award Justification */}
                      <div className="mt-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Award Justification *
                        </label>
                        <textarea
                          {...register('awardJustification', { 
                            required: 'Award justification is required',
                            minLength: { value: 100, message: 'Justification must be at least 100 characters' }
                          })}
                          rows={4}
                          className="government-input"
                          placeholder="Provide comprehensive justification for the award decision based on evaluation criteria..."
                        />
                        {errors.awardJustification && (
                          <p className="mt-1 text-sm text-red-600">{errors.awardJustification.message}</p>
                        )}
                      </div>

                      {/* Final Remarks */}
                      <div className="mt-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Final Committee Remarks *
                        </label>
                        <textarea
                          {...register('finalRemarks', { 
                            required: 'Final remarks are required',
                            minLength: { value: 50, message: 'Final remarks must be at least 50 characters' }
                          })}
                          rows={3}
                          className="government-input"
                          placeholder="Final observations and recommendations from the State Committee..."
                        />
                        {errors.finalRemarks && (
                          <p className="mt-1 text-sm text-red-600">{errors.finalRemarks.message}</p>
                        )}
                      </div>

                      {/* Committee Approvals */}
                      <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <label className="flex items-center p-3 bg-white/60 rounded-lg">
                          <input
                            type="checkbox"
                            {...register('chairpersonApproval', { required: 'Chairperson approval is required' })}
                            className="mr-2 text-orange-600"
                          />
                          <span className="text-sm text-gray-700 font-medium">Committee Chairperson Approval</span>
                        </label>

                        <label className="flex items-center p-3 bg-white/60 rounded-lg">
                          <input
                            type="checkbox"
                            {...register('committeeConsensus', { required: 'Committee consensus confirmation is required' })}
                            className="mr-2 text-orange-600"
                          />
                          <span className="text-sm text-gray-700 font-medium">Full Committee Consensus</span>
                        </label>
                      </div>
                      
                      {(errors.chairpersonApproval || errors.committeeConsensus) && (
                        <p className="mt-2 text-sm text-red-600">All committee approvals are required</p>
                      )}
                    </div>
                  </div>
                )}

                {/* Navigation and Final Action Buttons */}
                <div className="flex justify-between items-center pt-6 border-t-2 border-orange-200">
                  <button
                    type="button"
                    onClick={() => setCurrentCriterion(Math.max(0, currentCriterion - 1))}
                    disabled={currentCriterion === 0}
                    className="px-6 py-3 bg-gray-300 hover:bg-gray-400 disabled:bg-gray-200 disabled:cursor-not-allowed text-gray-700 rounded-lg transition-colors font-medium"
                  >
                    Previous Criterion
                  </button>

                  <button
                    type="button"
                    onClick={saveProgress}
                    className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center font-medium"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Save Draft
                  </button>

                  {currentCriterion < criteria.length - 1 ? (
                    <button
                      type="button"
                      onClick={() => setCurrentCriterion(Math.min(criteria.length - 1, currentCriterion + 1))}
                      className="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors font-medium"
                    >
                      Next Criterion
                    </button>
                  ) : (
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="px-8 py-4 bg-gradient-to-r from-orange-600 to-yellow-600 hover:from-orange-700 hover:to-yellow-700 text-white rounded-lg transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed font-bold text-lg shadow-lg"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                          Finalizing Award...
                        </>
                      ) : (
                        <>
                          <Trophy className="h-5 w-5 mr-2" />
                          FINALIZE AWARD DECISION
                        </>
                      )}
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}