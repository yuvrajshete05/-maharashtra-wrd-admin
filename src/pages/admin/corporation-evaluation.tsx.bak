import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import toast from 'react-hot-toast'
import { ArrowLeft, Save, Send, LogOut, Building2, Users, Award, TrendingUp, FileText, CheckCircle2, AlertTriangle, ThumbsUp, ThumbsDown, Star } from 'lucide-react'

// Browser-Only Session Manager
class BrowserSessionManager {
  static forceLogoutAdmin(): boolean {
    localStorage.removeItem('admin_active_session');
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminData');
    return true;
  }
}

// Corporation Committee Evaluation Form Data
interface CorporationEvaluationData {
  // Application Review
  applicationId: string
  wuaName: string
  applicantName: string
  
  // Circle Committee Review
  circleCommitteeScore: number
  circleRecommendation: string
  circleRemarksReviewed: boolean
  
  // Module 1: Organizational Structure & Governance (6 marks)
  organizationalStructure: number // 0-2 marks
  leadershipQuality: number // 0-2 marks  
  governanceTransparency: number // 0-2 marks
  
  // Module 2: Financial Management (6 marks)
  financialTransparency: number // 0-2 marks
  budgetManagement: number // 0-2 marks
  auditCompliance: number // 0-2 marks
  
  // Module 3: Water Management & Conservation (6 marks)  
  waterConservationPractices: number // 0-2 marks
  distributionEfficiency: number // 0-2 marks
  wastageControl: number // 0-2 marks
  
  // Module 4: Community Engagement & Impact (6 marks)
  memberParticipation: number // 0-2 marks
  communityBenefit: number // 0-2 marks
  socialImpact: number // 0-2 marks
  
  // Module 5: Innovation & Sustainability (6 marks)
  technologicalAdoption: number // 0-2 marks
  sustainabilityPractices: number // 0-2 marks
  innovativeApproaches: number // 0-2 marks
  
  // Additional Assessment
  documentVerification: boolean
  siteInspectionRequired: boolean
  siteInspectionNotes: string
  
  // Final Evaluation
  totalScore: number // Auto-calculated from modules (max 30)
  recommendation: 'forward_to_state' | 'return_to_circle' | 'reject'
  detailedRemarks: string
  
  // Committee Details
  evaluatedBy: string
  evaluationDate: string
  committeeSignature: boolean
}

// Mock data for Circle Committee evaluation result
const mockCircleEvaluation = {
  applicationId: 'WUA/MH/2024/001',
  wuaName: 'Shivaji Water User Association',
  applicantName: 'Ramesh Kumar Patil',
  district: 'Pune',
  category: 'MAJOR',
  selfAssessmentScore: 142,
  circleCommitteeScore: 87,
  circleRecommendation: 'recommended',
  circleRemarks: 'Strong infrastructure and good parameter compliance. Site visit conducted successfully.',
  submissionDate: '2024-01-15',
  circleEvaluationDate: '2024-02-01'
}

export default function CorporationCommitteeEvaluation() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [userToken, setUserToken] = useState<string | null>(null)
  const [userData, setUserData] = useState<any>(null)
  const [currentModule, setCurrentModule] = useState(0)

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue
  } = useForm<CorporationEvaluationData>()

  // Watch all form values
  const watchedValues = watch()

  // Authentication check
  useEffect(() => {
    const token = localStorage.getItem('adminToken')
    const adminData = localStorage.getItem('adminData')

    if (!token || !adminData) {
      toast.error('Please login first')
      router.push('/admin/login')
      return
    }

    try {
      const parsedData = JSON.parse(adminData)
      // Check if user is authorized for corporation committee evaluation
      if (!['admin', 'super-admin', 'corporation-committee'].includes(parsedData.userType || parsedData.adminLevel)) {
        toast.error('Access denied. Corporation Committee members only.')
        router.push('/admin/dashboard')
        return
      }
      setUserToken(token)
      setUserData(parsedData)
    } catch (error) {
      console.error('Auth error:', error)
      toast.error('Invalid session')
      router.push('/admin/login')
    }
  }, [router])

  // Logout handler
  const handleLogout = () => {
    BrowserSessionManager.forceLogoutAdmin();
    toast.success('Logged out successfully');
    router.push('/admin/login');
  };

  // Calculate total score from all modules
  const calculateTotalScore = () => {
    const scores = [
      // Module 1: Organizational Structure & Governance
      (watchedValues.organizationalStructure || 0) +
      (watchedValues.leadershipQuality || 0) +
      (watchedValues.governanceTransparency || 0),
      
      // Module 2: Financial Management
      (watchedValues.financialTransparency || 0) +
      (watchedValues.budgetManagement || 0) +
      (watchedValues.auditCompliance || 0),
      
      // Module 3: Water Management & Conservation
      (watchedValues.waterConservationPractices || 0) +
      (watchedValues.distributionEfficiency || 0) +
      (watchedValues.wastageControl || 0),
      
      // Module 4: Community Engagement & Impact
      (watchedValues.memberParticipation || 0) +
      (watchedValues.communityBenefit || 0) +
      (watchedValues.socialImpact || 0),
      
      // Module 5: Innovation & Sustainability
      (watchedValues.technologicalAdoption || 0) +
      (watchedValues.sustainabilityPractices || 0) +
      (watchedValues.innovativeApproaches || 0)
    ]
    
    const total = scores.reduce((sum, score) => sum + score, 0)
    setValue('totalScore', total)
    return total
  }

  // Update total score when any module score changes
  useEffect(() => {
    calculateTotalScore()
  }, [watchedValues])

  // Form submission handler
  const onSubmit = async (data: CorporationEvaluationData) => {
    if (!userToken) {
      toast.error('Authentication required')
      return
    }

    setIsLoading(true)

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Prepare evaluation data
      const evaluationData = {
        ...data,
        applicationId: mockCircleEvaluation.applicationId,
        evaluatedBy: userData.name,
        evaluationDate: new Date().toISOString(),
        evaluatorType: 'corporation',
        stage: 'corporation_committee'
      }

      console.log('Corporation Committee Evaluation:', evaluationData)
      
      const recommendation = data.recommendation
      if (recommendation === 'forward_to_state') {
        toast.success('Application forwarded to State Committee!')
      } else if (recommendation === 'return_to_circle') {
        toast.success('Application returned to Circle Committee for review')
      } else {
        toast.success('Application rejected at Corporation level')
      }
      
      setTimeout(() => {
        router.push('/admin/dashboard')
      }, 2000)

    } catch (error) {
      console.error('Submission error:', error)
      toast.error('Failed to submit evaluation. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  // Save progress
  const saveProgress = () => {
    localStorage.setItem('corporation_evaluation_draft', JSON.stringify(watchedValues))
    toast.success('Evaluation draft saved!')
  }

  // Load saved progress
  useEffect(() => {
    const savedDraft = localStorage.getItem('corporation_evaluation_draft')
    if (savedDraft) {
      try {
        const draft = JSON.parse(savedDraft)
        Object.keys(draft).forEach(key => {
          setValue(key as keyof CorporationEvaluationData, draft[key])
        })
      } catch (error) {
        console.error('Error loading draft:', error)
      }
    }
  }, [setValue])

  if (!userToken) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-white">Loading...</div>
      </div>
    )
  }

  const modules = [
    { name: 'Organizational Structure', icon: Building2, maxScore: 6 },
    { name: 'Financial Management', icon: TrendingUp, maxScore: 6 },
    { name: 'Water Management', icon: Users, maxScore: 6 },
    { name: 'Community Engagement', icon: Award, maxScore: 6 },
    { name: 'Innovation & Sustainability', icon: Star, maxScore: 6 }
  ]

  const currentScore = calculateTotalScore()
  const moduleScore = Math.floor(currentScore / 5 * (currentModule + 1)) - Math.floor(currentScore / 5 * currentModule)

  return (
    <>
      <Head>
        <title>Corporation Committee Evaluation - Maharashtra WRD</title>
        <meta name="description" content="Corporation Committee evaluation form for WUA applications" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
        {/* Header */}
        <div className="bg-white/10 backdrop-blur-md border-b border-white/20">
          <div className="container mx-auto px-6 py-4 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="flex items-center text-white/80 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Dashboard
              </button>
            </div>

            <div className="flex items-center space-x-4">
              <div className="text-center">
                <h1 className="text-lg font-semibold text-white">Corporation Committee Evaluation</h1>
                <p className="text-sm text-white/70">Second Level Assessment • Max: 30 Marks</p>
              </div>
              
              <button
                onClick={handleLogout}
                className="flex items-center px-4 py-2 bg-red-600/20 hover:bg-red-600/30 text-white rounded-lg transition-colors border border-red-500/30"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </button>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-6 py-8">
          <div className="max-w-6xl mx-auto">
            {/* Application & Circle Committee Summary */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
              {/* Application Summary */}
              <div className="government-card p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Application Summary</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">WUA Name:</span>
                    <span className="font-medium">{mockCircleEvaluation.wuaName}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Applicant:</span>
                    <span className="font-medium">{mockCircleEvaluation.applicantName}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Application ID:</span>
                    <span className="font-medium">{mockCircleEvaluation.applicationId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Self-Assessment:</span>
                    <span className="font-semibold text-blue-600">{mockCircleEvaluation.selfAssessmentScore}/150</span>
                  </div>
                </div>
              </div>

              {/* Circle Committee Results */}
              <div className="government-card p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Circle Committee Results</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Circle Score:</span>
                    <span className="text-xl font-bold text-green-600">{mockCircleEvaluation.circleCommitteeScore}/100</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Recommendation:</span>
                    <span className="font-medium text-green-700 capitalize">{mockCircleEvaluation.circleRecommendation}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Evaluation Date:</span>
                    <span className="font-medium">{mockCircleEvaluation.circleEvaluationDate}</span>
                  </div>
                  <div className="mt-3">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        {...register('circleRemarksReviewed', { required: 'Please confirm Circle Committee review' })}
                        className="mr-2 text-orange-600"
                      />
                      <span className="text-sm text-gray-700">Circle Committee remarks reviewed</span>
                    </label>
                  </div>
                </div>
              </div>
            </div>

            {/* Module Navigation */}
            <div className="government-card p-6 mb-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">Corporation Committee Assessment</h3>
                <div className="text-right">
                  <div className="text-2xl font-bold text-orange-600">{currentScore}/30</div>
                  <div className="text-sm text-gray-500">Total Score</div>
                </div>
              </div>
              
              {/* Module tabs */}
              <div className="flex flex-wrap gap-2 mb-6">
                {modules.map((module, index) => {
                  const ModuleIcon = module.icon
                  return (
                    <button
                      key={index}
                      onClick={() => setCurrentModule(index)}
                      className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                        currentModule === index
                          ? 'bg-orange-600 text-white'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                      }`}
                    >
                      <ModuleIcon className="w-4 h-4 mr-2" />
                      <span className="hidden sm:inline">{module.name}</span>
                      <span className="sm:hidden">M{index + 1}</span>
                      <span className="ml-2 text-xs">({module.maxScore})</span>
                    </button>
                  )
                })}
              </div>

              {/* Progress bar */}
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-orange-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${(currentScore / 30) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* Evaluation Form */}
            <div className="government-card p-8">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
                
                {/* Module 1: Organizational Structure & Governance */}
                {currentModule === 0 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Building2 className="w-6 h-6 text-orange-600 mr-3" />
                      <h3 className="text-xl font-semibold text-gray-900">Module 1: Organizational Structure & Governance</h3>
                      <span className="ml-auto text-sm text-gray-500">(Max: 6 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'organizationalStructure', 
                          label: 'Organizational Structure',
                          description: 'Clear hierarchy, defined roles, proper organizational chart'
                        },
                        { 
                          key: 'leadershipQuality', 
                          label: 'Leadership Quality',
                          description: 'Leadership effectiveness, decision-making, member confidence'
                        },
                        { 
                          key: 'governanceTransparency', 
                          label: 'Governance Transparency',
                          description: 'Meeting transparency, decision documentation, member access to info'
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-orange-50 p-6 rounded-lg">
                          <h4 className="font-medium text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          
                          <div className="space-y-2">
                            {[2, 1, 0].map((score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof CorporationEvaluationData, { 
                                    required: `${criterion.label} rating is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-orange-600"
                                />
                                <span className={`text-sm ${
                                  score === 2 ? 'text-green-700 font-medium' : 
                                  score === 1 ? 'text-yellow-700' : 'text-red-700'
                                }`}>
                                  {score === 2 ? 'Excellent (2 marks)' : 
                                   score === 1 ? 'Good (1 mark)' : 'Needs Improvement (0 marks)'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Module 2: Financial Management */}
                {currentModule === 1 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <TrendingUp className="w-6 h-6 text-green-600 mr-3" />
                      <h3 className="text-xl font-semibold text-gray-900">Module 2: Financial Management</h3>
                      <span className="ml-auto text-sm text-gray-500">(Max: 6 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'financialTransparency', 
                          label: 'Financial Transparency',
                          description: 'Open financial records, member access to accounts, regular reporting'
                        },
                        { 
                          key: 'budgetManagement', 
                          label: 'Budget Management',
                          description: 'Proper budget planning, expense control, fund utilization efficiency'
                        },
                        { 
                          key: 'auditCompliance', 
                          label: 'Audit Compliance',
                          description: 'Regular audits, compliance with financial norms, audit recommendations'
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-green-50 p-6 rounded-lg">
                          <h4 className="font-medium text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          
                          <div className="space-y-2">
                            {[2, 1, 0].map((score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof CorporationEvaluationData, { 
                                    required: `${criterion.label} rating is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-green-600"
                                />
                                <span className={`text-sm ${
                                  score === 2 ? 'text-green-700 font-medium' : 
                                  score === 1 ? 'text-yellow-700' : 'text-red-700'
                                }`}>
                                  {score === 2 ? 'Excellent (2 marks)' : 
                                   score === 1 ? 'Good (1 mark)' : 'Needs Improvement (0 marks)'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Module 3: Water Management & Conservation */}
                {currentModule === 2 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Users className="w-6 h-6 text-blue-600 mr-3" />
                      <h3 className="text-xl font-semibold text-gray-900">Module 3: Water Management & Conservation</h3>
                      <span className="ml-auto text-sm text-gray-500">(Max: 6 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'waterConservationPractices', 
                          label: 'Conservation Practices',
                          description: 'Water saving techniques, rainwater harvesting, conservation awareness'
                        },
                        { 
                          key: 'distributionEfficiency', 
                          label: 'Distribution Efficiency',
                          description: 'Fair water distribution, minimal wastage, timely supply'
                        },
                        { 
                          key: 'wastageControl', 
                          label: 'Wastage Control',
                          description: 'Leak prevention, usage monitoring, wastage reduction measures'
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-blue-50 p-6 rounded-lg">
                          <h4 className="font-medium text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          
                          <div className="space-y-2">
                            {[2, 1, 0].map((score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof CorporationEvaluationData, { 
                                    required: `${criterion.label} rating is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-blue-600"
                                />
                                <span className={`text-sm ${
                                  score === 2 ? 'text-green-700 font-medium' : 
                                  score === 1 ? 'text-yellow-700' : 'text-red-700'
                                }`}>
                                  {score === 2 ? 'Excellent (2 marks)' : 
                                   score === 1 ? 'Good (1 mark)' : 'Needs Improvement (0 marks)'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Module 4: Community Engagement & Impact */}
                {currentModule === 3 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Award className="w-6 h-6 text-purple-600 mr-3" />
                      <h3 className="text-xl font-semibold text-gray-900">Module 4: Community Engagement & Impact</h3>
                      <span className="ml-auto text-sm text-gray-500">(Max: 6 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'memberParticipation', 
                          label: 'Member Participation',
                          description: 'Active member involvement, meeting attendance, voluntary contributions'
                        },
                        { 
                          key: 'communityBenefit', 
                          label: 'Community Benefit',
                          description: 'Broader community impact, benefit sharing, inclusive approach'
                        },
                        { 
                          key: 'socialImpact', 
                          label: 'Social Impact',
                          description: 'Social cohesion, conflict resolution, community development'
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-purple-50 p-6 rounded-lg">
                          <h4 className="font-medium text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          
                          <div className="space-y-2">
                            {[2, 1, 0].map((score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof CorporationEvaluationData, { 
                                    required: `${criterion.label} rating is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-purple-600"
                                />
                                <span className={`text-sm ${
                                  score === 2 ? 'text-green-700 font-medium' : 
                                  score === 1 ? 'text-yellow-700' : 'text-red-700'
                                }`}>
                                  {score === 2 ? 'Excellent (2 marks)' : 
                                   score === 1 ? 'Good (1 mark)' : 'Needs Improvement (0 marks)'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Module 5: Innovation & Sustainability */}
                {currentModule === 4 && (
                  <div className="space-y-6">
                    <div className="flex items-center mb-6">
                      <Star className="w-6 h-6 text-yellow-600 mr-3" />
                      <h3 className="text-xl font-semibold text-gray-900">Module 5: Innovation & Sustainability</h3>
                      <span className="ml-auto text-sm text-gray-500">(Max: 6 marks)</span>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                      {[
                        { 
                          key: 'technologicalAdoption', 
                          label: 'Technology Adoption',
                          description: 'Use of modern technology, digital systems, automation'
                        },
                        { 
                          key: 'sustainabilityPractices', 
                          label: 'Sustainability Practices',
                          description: 'Environmental protection, sustainable practices, eco-friendly approaches'
                        },
                        { 
                          key: 'innovativeApproaches', 
                          label: 'Innovative Approaches',
                          description: 'Creative solutions, new methods, best practice adoption'
                        }
                      ].map((criterion) => (
                        <div key={criterion.key} className="bg-yellow-50 p-6 rounded-lg">
                          <h4 className="font-medium text-gray-800 mb-2">{criterion.label}</h4>
                          <p className="text-sm text-gray-600 mb-4">{criterion.description}</p>
                          
                          <div className="space-y-2">
                            {[2, 1, 0].map((score) => (
                              <label key={score} className="flex items-center">
                                <input
                                  type="radio"
                                  {...register(criterion.key as keyof CorporationEvaluationData, { 
                                    required: `${criterion.label} rating is required` 
                                  })}
                                  value={score}
                                  className="mr-2 text-yellow-600"
                                />
                                <span className={`text-sm ${
                                  score === 2 ? 'text-green-700 font-medium' : 
                                  score === 1 ? 'text-yellow-700' : 'text-red-700'
                                }`}>
                                  {score === 2 ? 'Excellent (2 marks)' : 
                                   score === 1 ? 'Good (1 mark)' : 'Needs Improvement (0 marks)'}
                                </span>
                              </label>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>

                    {/* Additional Assessment Section */}
                    <div className="mt-8 bg-gray-50 p-6 rounded-lg">
                      <h4 className="font-medium text-gray-800 mb-4">Additional Assessment</h4>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <div className="space-y-3">
                            <label className="flex items-center">
                              <input
                                type="checkbox"
                                {...register('documentVerification')}
                                className="mr-2 text-orange-600"
                              />
                              <span className="text-gray-700">All supporting documents verified</span>
                            </label>
                            
                            <label className="flex items-center">
                              <input
                                type="checkbox"
                                {...register('siteInspectionRequired')}
                                className="mr-2 text-orange-600"
                              />
                              <span className="text-gray-700">Additional site inspection required</span>
                            </label>
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Site Inspection Notes
                          </label>
                          <textarea
                            {...register('siteInspectionNotes')}
                            rows={3}
                            className="government-input"
                            placeholder="Any additional observations or inspection requirements..."
                          />
                        </div>
                      </div>
                    </div>

                    {/* Final Recommendation Section */}
                    <div className="mt-8 bg-gradient-to-br from-orange-50 to-yellow-50 p-6 rounded-lg border border-orange-200">
                      <h4 className="font-medium text-gray-800 mb-4 flex items-center">
                        <CheckCircle2 className="w-5 h-5 mr-2 text-orange-600" />
                        Final Committee Recommendation
                      </h4>
                      
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {/* Score Display */}
                        <div className="text-center">
                          <div className="text-4xl font-bold text-orange-600 mb-2">{currentScore}/30</div>
                          <div className="text-gray-600 mb-4">Corporation Committee Score</div>
                          <div className="text-sm text-gray-500">
                            {currentScore >= 24 ? '🏆 Excellence Range' :
                             currentScore >= 18 ? '⭐ Good Performance' :
                             currentScore >= 12 ? '⚠️ Average Performance' :
                             '❌ Below Expectation'}
                          </div>
                        </div>

                        {/* Recommendation Options */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-3">
                            Committee Decision *
                          </label>
                          <div className="space-y-3">
                            <label className="flex items-center p-3 border border-green-300 rounded-lg cursor-pointer hover:bg-green-50">
                              <input
                                type="radio"
                                {...register('recommendation', { required: 'Committee decision is required' })}
                                value="forward_to_state"
                                className="mr-3 text-green-600"
                              />
                              <div>
                                <div className="font-medium text-green-700 flex items-center">
                                  <ThumbsUp className="w-4 h-4 mr-1" />
                                  Forward to State Committee
                                </div>
                                <div className="text-sm text-green-600">Recommend for state-level evaluation</div>
                              </div>
                            </label>

                            <label className="flex items-center p-3 border border-yellow-300 rounded-lg cursor-pointer hover:bg-yellow-50">
                              <input
                                type="radio"
                                {...register('recommendation')}
                                value="return_to_circle"
                                className="mr-3 text-yellow-600"
                              />
                              <div>
                                <div className="font-medium text-yellow-700 flex items-center">
                                  <AlertTriangle className="w-4 h-4 mr-1" />
                                  Return to Circle Committee
                                </div>
                                <div className="text-sm text-yellow-600">Needs further review at circle level</div>
                              </div>
                            </label>

                            <label className="flex items-center p-3 border border-red-300 rounded-lg cursor-pointer hover:bg-red-50">
                              <input
                                type="radio"
                                {...register('recommendation')}
                                value="reject"
                                className="mr-3 text-red-600"
                              />
                              <div>
                                <div className="font-medium text-red-700 flex items-center">
                                  <ThumbsDown className="w-4 h-4 mr-1" />
                                  Reject Application
                                </div>
                                <div className="text-sm text-red-600">Application does not meet criteria</div>
                              </div>
                            </label>
                          </div>
                          {errors.recommendation && (
                            <p className="mt-1 text-sm text-red-600">{errors.recommendation.message}</p>
                          )}
                        </div>
                      </div>

                      <div className="mt-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Detailed Remarks *
                        </label>
                        <textarea
                          {...register('detailedRemarks', { 
                            required: 'Detailed remarks are required',
                            minLength: { value: 50, message: 'Remarks must be at least 50 characters' }
                          })}
                          rows={4}
                          className="government-input"
                          placeholder="Provide comprehensive remarks justifying your recommendation..."
                        />
                        {errors.detailedRemarks && (
                          <p className="mt-1 text-sm text-red-600">{errors.detailedRemarks.message}</p>
                        )}
                      </div>

                      <div className="mt-4">
                        <label className="flex items-center">
                          <input
                            type="checkbox"
                            {...register('committeeSignature', { required: 'Committee signature confirmation is required' })}
                            className="mr-2 text-orange-600"
                          />
                          <span className="text-sm text-gray-700">I confirm this evaluation as Corporation Committee member</span>
                        </label>
                        {errors.committeeSignature && (
                          <p className="mt-1 text-sm text-red-600">{errors.committeeSignature.message}</p>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {/* Navigation and Action Buttons */}
                <div className="flex justify-between items-center pt-6 border-t">
                  <button
                    type="button"
                    onClick={() => setCurrentModule(Math.max(0, currentModule - 1))}
                    disabled={currentModule === 0}
                    className="px-4 py-2 bg-gray-300 hover:bg-gray-400 disabled:bg-gray-200 disabled:cursor-not-allowed text-gray-700 rounded-lg transition-colors"
                  >
                    Previous Module
                  </button>

                  <button
                    type="button"
                    onClick={saveProgress}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Save Draft
                  </button>

                  {currentModule < modules.length - 1 ? (
                    <button
                      type="button"
                      onClick={() => setCurrentModule(Math.min(modules.length - 1, currentModule + 1))}
                      className="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors"
                    >
                      Next Module
                    </button>
                  ) : (
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="government-button flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Submitting...
                        </>
                      ) : (
                        <>
                          <Send className="h-4 w-4 mr-2" />
                          Submit Evaluation
                        </>
                      )}
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}