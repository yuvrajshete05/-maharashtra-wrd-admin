import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import toast from 'react-hot-toast'
import { ArrowLeft, Save, Send, LogOut, FileCheck, MapPin, CheckCircle, XCircle, AlertCircle, ThumbsUp, ThumbsDown, Eye, RefreshCw } from 'lucide-react'

// Browser-Only Session Manager
class BrowserSessionManager {
  static forceLogoutAdmin(): boolean {
    localStorage.removeItem('admin_active_session');
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminData');
    return true;
  }
}

// Circle Committee Evaluation Form Data (As per specifications)
interface CircleEvaluationData {
  // Application Details
  applicationId: string
  wuaName: string
  applicantName: string
  district: string
  
  // Section 1: Application Verification
  nominationFormVerified: 'yes' | 'no'
  selfAssessmentVerified: 'yes' | 'no'
  dataAccuracyCheck: 'verified' | 'minor_issues' | 'major_issues'
  verificationRemarks: string
  
  // Section 2: Key Regulatory Checks (4 Mandatory Parameters)
  regularWaterRequests: 'yes' | 'no' | 'partial'
  waterRequestsRemarks: string
  
  regularWaterTax: 'yes' | 'no' | 'partial'
  waterTaxRemarks: string
  
  regularElections: 'yes' | 'no' | 'partial' 
  electionsRemarks: string
  
  regularLogReporting: 'yes' | 'no' | 'partial'
  logReportingRemarks: string
  
  // Section 3: Site Visit and Documentation
  siteVisitConducted: 'yes' | 'no'
  siteVisitDate: string
  siteVisitOfficers: string
  documentsPhysicallyVerified: 'yes' | 'no' | 'partial'
  siteConditionAssessment: 'excellent' | 'good' | 'satisfactory' | 'poor'
  verificationMarks: number // Max 50 marks
  
  // Section 4: Self-Assessment Endorsement
  selfAssessmentScore: number // Out of 150
  scoreEndorsed: 'yes' | 'no' | 'partial'
  scoreAdjustment: number // + or - adjustment
  endorsementRemarks: string
  
  // Section 5: Final Recommendation  
  finalRecommendation: 'recommended' | 'not_recommended' | 'disqualified'
  disqualificationReason?: string
  specialObservations: string
  
  // Committee Details
  evaluatedBy: string
  evaluationDate: string
  committeeSignature: string
}

// Mock application data - in real app, this would come from API
const mockApplication = {
  id: 'WUA/MH/2024/001',
  wuaName: 'Shivaji Water User Association',
  applicantName: 'Ramesh Kumar Patil',
  district: 'Pune',
  category: 'MAJOR',
  selfAssessmentScore: 142,
  submissionDate: '2024-01-15'
}

export default function CircleCommitteeEvaluation() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [userToken, setUserToken] = useState<string | null>(null)
  const [userData, setUserData] = useState<any>(null)
  const [currentStep, setCurrentStep] = useState(0)
  const [nominations, setNominations] = useState<any[]>([])
  const [selectedNomination, setSelectedNomination] = useState<any>(null)
  const [isLoadingData, setIsLoadingData] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
    reset
  } = useForm<CircleEvaluationData>()

  // Watch all form values
  const watchedValues = watch()

  // Authentication check
  useEffect(() => {
    const token = localStorage.getItem('adminToken')
    const adminData = localStorage.getItem('adminData')

    if (!token || !adminData) {
      toast.error('Please login first')
      router.push('/admin/login')
      return
    }

    try {
      const parsedData = JSON.parse(adminData)
      // Check if user is authorized for circle committee evaluation
      if (!['admin', 'super-admin', 'circle-committee'].includes(parsedData.userType || parsedData.adminLevel)) {
        toast.error('Access denied. Circle Committee members only.')
        router.push('/admin/dashboard')
        return
      }
      setUserToken(token)
      setUserData(parsedData)
      
      // Load nominations for evaluation
      loadNominations(token, parsedData)
    } catch (error) {
      console.error('Auth error:', error)
      toast.error('Invalid session')
      router.push('/admin/login')
    }
  }, [router])

  // Load nominations from MongoDB
  const loadNominations = async (token: string, adminData: any) => {
    setIsLoadingData(true)
    try {
      const response = await fetch('/api/nominations/get-for-evaluation?stage=circle', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      const result = await response.json()
      if (result.success) {
        setNominations(result.nominations)
        console.log(`✅ Loaded ${result.nominations.length} nominations for circle evaluation`)
        
        // Auto-select first nomination if available
        if (result.nominations.length > 0) {
          selectNominationForEvaluation(result.nominations[0])
        }
      } else {
        toast.error('Failed to load nominations')
      }
    } catch (error) {
      console.error('Error loading nominations:', error)
      toast.error('Network error loading nominations')
    } finally {
      setIsLoadingData(false)
    }
  }

  // Select nomination for evaluation
  const selectNominationForEvaluation = (nomination: any) => {
    setSelectedNomination(nomination)
    
    // Pre-fill form with nomination data
    setValue('applicationId', nomination.wuaId)
    setValue('wuaName', nomination.wuaName)
    setValue('applicantName', nomination.chairmanName)
    
    toast.success(`Selected: ${nomination.wuaName} for evaluation`)
  }

  // Logout handler
  const handleLogout = () => {
    BrowserSessionManager.forceLogoutAdmin();
    toast.success('Logged out successfully');
    router.push('/admin/login');
  };

  // Calculate overall score based on evaluations
  const calculateOverallScore = () => {
    let score = 0
    const values = watchedValues

    // Document verification (20 points)
    if (values.documentsPhysicallyVerified === 'yes') score += 5
    if (values.siteVisitConducted === 'yes') score += 3
    if (values.scoreEndorsed === 'yes') score += 3
    if (values.finalRecommendation === 'recommended') score += 4
    if (values.nominationFormVerified === 'yes') score += 3
    if (values.selfAssessmentVerified === 'yes') score += 2

    // Parameter verification (40 points)
    const parameterScore = (param: string) => {
      if (param === 'yes') return 10
      if (param === 'partial') return 5
      return 0
    }
    
    score += parameterScore(values.regularWaterRequests)
    score += parameterScore(values.regularWaterTax)
    score += parameterScore(values.regularElections)
    score += parameterScore(values.regularLogReporting)

    // Infrastructure assessment (25 points)
    const infraScore = (rating: string) => {
      if (rating === 'excellent') return 8
      if (rating === 'good') return 6
      if (rating === 'fair') return 4
      if (rating === 'poor') return 2
      return 0
    }
    
    score += infraScore(values.infrastructureCondition)
    score += infraScore(values.maintenanceQuality)
    score += Math.round(infraScore(values.waterDistributionEfficiency) * 1.125) // Weighted slightly higher

    // Self-assessment accuracy (15 points)
    if (values.selfAssessmentReviewed) score += 5
    if (values.selfAssessmentAccurate) score += 10

    setValue('overallScore', Math.min(score, 100)) // Cap at 100
    return Math.min(score, 100)
  }

  // Update score when relevant fields change
  useEffect(() => {
    calculateOverallScore()
  }, [watchedValues])

  // Form submission handler
  const onSubmit = async (data: CircleEvaluationData) => {
    if (!userToken) {
      toast.error('Authentication required')
      return
    }

    setIsLoading(true)

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Prepare evaluation data
      const evaluationData = {
        ...data,
        applicationId: mockApplication.id,
        evaluatedBy: userData.name,
        evaluationDate: new Date().toISOString(),
        evaluatorType: 'circle',
        stage: 'circle_committee'
      }

      console.log('Circle Committee Evaluation:', evaluationData)
      
      const recommendation = data.recommendation
      if (recommendation === 'recommended') {
        toast.success('Application recommended for Corporation Committee!')
      } else if (recommendation === 'conditionally_recommended') {
        toast.success('Application conditionally recommended with remarks')
      } else {
        toast.success('Application evaluation completed - Not recommended')
      }
      
      setTimeout(() => {
        router.push('/admin/dashboard')
      }, 2000)

    } catch (error) {
      console.error('Submission error:', error)
      toast.error('Failed to submit evaluation. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  // Save progress
  const saveProgress = () => {
    localStorage.setItem('circle_evaluation_draft', JSON.stringify(watchedValues))
    toast.success('Evaluation draft saved!')
  }

  // Load saved progress
  useEffect(() => {
    const savedDraft = localStorage.getItem('circle_evaluation_draft')
    if (savedDraft) {
      try {
        const draft = JSON.parse(savedDraft)
        Object.keys(draft).forEach(key => {
          setValue(key as keyof CircleEvaluationData, draft[key])
        })
      } catch (error) {
        console.error('Error loading draft:', error)
      }
    }
  }, [setValue])

  if (!userToken) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-white">Loading...</div>
      </div>
    )
  }

  const steps = [
    'Application Verification',
    'Regulatory Checks', 
    'Site Visit & Documentation',
    'Self-Assessment Review',
    'Final Recommendation'
  ]

  const currentScore = calculateOverallScore()

  return (
    <>
      <Head>
        <title>Circle Committee Evaluation - Maharashtra WRD</title>
        <meta name="description" content="Circle Committee evaluation form for WUA applications" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
        {/* Header */}
        <div className="bg-white/10 backdrop-blur-md border-b border-white/20">
          <div className="container mx-auto px-6 py-4 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="flex items-center text-white/80 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Dashboard
              </button>
            </div>

            <div className="flex items-center space-x-4">
              <div className="text-center">
                <h1 className="text-lg font-semibold text-white">Circle Committee Evaluation</h1>
                <p className="text-sm text-white/70">First Level Assessment</p>
              </div>
              
              <button
                onClick={handleLogout}
                className="flex items-center px-4 py-2 bg-red-600/20 hover:bg-red-600/30 text-white rounded-lg transition-colors border border-red-500/30"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </button>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-6 py-8">
          <div className="max-w-4xl mx-auto">
            {/* Application Summary Card */}
            <div className="government-card p-6 mb-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h2 className="text-xl font-bold text-gray-900">{mockApplication.wuaName}</h2>
                  <p className="text-gray-600">Applicant: {mockApplication.applicantName}</p>
                  <p className="text-sm text-gray-500">
                    Application ID: {mockApplication.id} | Category: {mockApplication.category}
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-lg font-semibold text-orange-600">Self-Assessment: {mockApplication.selfAssessmentScore}/150</div>
                  <div className="text-sm text-gray-500">Submitted: {mockApplication.submissionDate}</div>
                </div>
              </div>
              
              {/* Step Progress */}
              <div className="flex items-center justify-between mb-4">
                {steps.map((step, index) => (
                  <div key={step} className="flex flex-col items-center flex-1">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                      index <= currentStep 
                        ? 'bg-orange-600 text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}>
                      {index + 1}
                    </div>
                    <div className="text-xs mt-1 text-center">{step}</div>
                  </div>
                ))}
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-orange-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* Evaluation Form */}
            <div className="government-card p-8">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
                
                {/* Step 0: Application Review */}
                {currentStep === 0 && (
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                      <Eye className="w-5 h-5 mr-2 text-blue-600" />
                      Application Review
                    </h3>
                    
                    <div className="bg-blue-50 p-6 rounded-lg">
                      <h4 className="font-medium text-gray-800 mb-4">Application Summary</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div><span className="font-medium">WUA Name:</span> {mockApplication.wuaName}</div>
                        <div><span className="font-medium">District:</span> {mockApplication.district}</div>
                        <div><span className="font-medium">Category:</span> {mockApplication.category}</div>
                        <div><span className="font-medium">Self-Assessment Score:</span> {mockApplication.selfAssessmentScore}/150</div>
                      </div>
                      <div className="mt-4">
                        <label className="flex items-center">
                          <input
                            type="checkbox"
                            {...register('selfAssessmentReviewed')}
                            className="mr-2 text-orange-600"
                          />
                          <span className="text-gray-700">I have reviewed the self-assessment questionnaire</span>
                        </label>
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 1: Document Verification */}
                {currentStep === 1 && (
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                      <FileCheck className="w-5 h-5 mr-2 text-green-600" />
                      Document Verification
                    </h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="bg-green-50 p-6 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-4">Document Checklist</h4>
                        <div className="space-y-3">
                          {[
                            { key: 'documentsReceived', label: 'All documents received' },
                            { key: 'documentsComplete', label: 'Documents are complete' },
                            { key: 'registrationCertificate', label: 'Registration Certificate' },
                            { key: 'membersList', label: 'Updated Members List' },
                            { key: 'financialRecords', label: 'Financial Records (2 years)' },
                            { key: 'meetingMinutes', label: 'Meeting Minutes' },
                            { key: 'projectDocuments', label: 'Project Documents' }
                          ].map((doc) => (
                            <label key={doc.key} className="flex items-center">
                              <input
                                type="checkbox"
                                {...register(doc.key as keyof CircleEvaluationData)}
                                className="mr-2 text-green-600"
                              />
                              <span className="text-gray-700">{doc.label}</span>
                            </label>
                          ))}
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 p-6 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-4">Self-Assessment Accuracy</h4>
                        <div className="space-y-3">
                          <label className="flex items-center">
                            <input
                              type="checkbox"
                              {...register('selfAssessmentAccurate')}
                              className="mr-2 text-orange-600"
                            />
                            <span className="text-gray-700">Self-assessment appears accurate</span>
                          </label>
                          
                          <label className="flex items-center">
                            <input
                              type="checkbox"
                              {...register('discrepanciesFound')}
                              className="mr-2 text-red-600"
                            />
                            <span className="text-gray-700">Discrepancies found</span>
                          </label>
                          
                          {watchedValues.discrepanciesFound && (
                            <div className="mt-3">
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Discrepancy Details
                              </label>
                              <textarea
                                {...register('discrepancyDetails')}
                                rows={3}
                                className="government-input"
                                placeholder="Describe any discrepancies found..."
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 2: Site Visit */}
                {currentStep === 2 && (
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                      <MapPin className="w-5 h-5 mr-2 text-purple-600" />
                      Site Visit Assessment
                    </h3>
                    
                    <div className="bg-purple-50 p-6 rounded-lg">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="flex items-center mb-4">
                            <input
                              type="checkbox"
                              {...register('siteVisitConducted', { required: 'Site visit confirmation is required' })}
                              className="mr-2 text-purple-600"
                            />
                            <span className="text-gray-700 font-medium">Site visit conducted</span>
                          </label>
                          
                          {watchedValues.siteVisitConducted && (
                            <div className="space-y-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                  Visit Date *
                                </label>
                                <input
                                  type="date"
                                  {...register('siteVisitDate', { required: 'Visit date is required' })}
                                  className="government-input"
                                />
                                {errors.siteVisitDate && (
                                  <p className="mt-1 text-sm text-red-600">{errors.siteVisitDate.message}</p>
                                )}
                              </div>
                              
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                  Visiting Officers *
                                </label>
                                <input
                                  type="text"
                                  {...register('siteVisitOfficers', { required: 'Officer names are required' })}
                                  className="government-input"
                                  placeholder="Names of officers who conducted site visit"
                                />
                                {errors.siteVisitOfficers && (
                                  <p className="mt-1 text-sm text-red-600">{errors.siteVisitOfficers.message}</p>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                        
                        <div>
                          <h4 className="font-medium text-gray-800 mb-4">Infrastructure Assessment</h4>
                          
                          {[
                            { key: 'infrastructureCondition', label: 'Overall Infrastructure Condition' },
                            { key: 'maintenanceQuality', label: 'Maintenance Quality' },
                            { key: 'waterDistributionEfficiency', label: 'Water Distribution Efficiency' }
                          ].map((item) => (
                            <div key={item.key} className="mb-4">
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                {item.label}
                              </label>
                              <select
                                {...register(item.key as keyof CircleEvaluationData)}
                                className="government-input"
                              >
                                <option value="">Select rating</option>
                                <option value="excellent">Excellent</option>
                                <option value="good">Good</option>
                                <option value="fair">Fair</option>
                                <option value="poor">Poor</option>
                              </select>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 3: Parameter Verification */}
                {currentStep === 3 && (
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                      <CheckCircle className="w-5 h-5 mr-2 text-blue-600" />
                      Parameter Verification
                    </h3>
                    
                    <div className="bg-blue-50 p-6 rounded-lg">
                      <p className="text-gray-600 mb-4">Verify the following parameters as per your Miro diagram requirements:</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {[
                          { key: 'regularWaterRequest', label: 'Regular Water Request (Yes/No)', help: 'Does WUA make regular water requests to authorities?' },
                          { key: 'regularWaterTax', label: 'Regular Water Tax (Yes/No)', help: 'Is water tax/fee collected regularly from members?' },
                          { key: 'regularElection', label: 'Regular Election (Yes/No)', help: 'Are elections conducted as per schedule?' },
                          { key: 'regularLogReporting', label: 'Regular Log Reporting (Yes/No)', help: 'Are activity logs maintained and reported regularly?' }
                        ].map((param) => (
                          <div key={param.key} className="bg-white p-4 rounded-lg">
                            <h5 className="font-medium text-gray-800 mb-2">{param.label}</h5>
                            <p className="text-sm text-gray-600 mb-3">{param.help}</p>
                            
                            <div className="space-y-2">
                              {['yes', 'partial', 'no'].map((value) => (
                                <label key={value} className="flex items-center">
                                  <input
                                    type="radio"
                                    {...register(param.key as keyof CircleEvaluationData, { required: `${param.label} verification is required` })}
                                    value={value}
                                    className="mr-2 text-blue-600"
                                  />
                                  <span className={`capitalize ${
                                    value === 'yes' ? 'text-green-700' : 
                                    value === 'partial' ? 'text-yellow-700' : 'text-red-700'
                                  }`}>
                                    {value} {value === 'yes' ? '(10 points)' : value === 'partial' ? '(5 points)' : '(0 points)'}
                                  </span>
                                </label>
                              ))}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 4: Final Evaluation */}
                {currentStep === 4 && (
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                      <AlertCircle className="w-5 h-5 mr-2 text-orange-600" />
                      Final Evaluation & Recommendation
                    </h3>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* Score Summary */}
                      <div className="bg-orange-50 p-6 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-4">Evaluation Score</h4>
                        <div className="text-center">
                          <div className="text-4xl font-bold text-orange-600 mb-2">{currentScore}/100</div>
                          <div className="text-gray-600">Circle Committee Score</div>
                          <div className="text-sm text-gray-500 mt-2">
                            {currentScore >= 75 ? '✅ Recommended Range' :
                             currentScore >= 50 ? '⚠️ Conditional Range' :
                             '❌ Below Threshold'}
                          </div>
                        </div>
                        
                        <div className="mt-6 space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span>Documents (Max 20):</span>
                            <span className="font-medium">{Math.min(20, Object.values({
                              documentsComplete: watchedValues.documentsComplete,
                              registrationCertificate: watchedValues.registrationCertificate,
                              membersList: watchedValues.membersList,
                              financialRecords: watchedValues.financialRecords,
                              meetingMinutes: watchedValues.meetingMinutes,
                              projectDocuments: watchedValues.projectDocuments
                            }).filter(Boolean).length * 3.33)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Parameters (Max 40):</span>
                            <span className="font-medium">{
                              ['regularWaterRequest', 'regularWaterTax', 'regularElection', 'regularLogReporting']
                                .reduce((sum, param) => {
                                  const value = watchedValues[param as keyof CircleEvaluationData]
                                  return sum + (value === 'yes' ? 10 : value === 'partial' ? 5 : 0)
                                }, 0)
                            }</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Infrastructure (Max 25):</span>
                            <span className="font-medium">{currentScore - Math.min(20, Object.values({
                              documentsComplete: watchedValues.documentsComplete,
                              registrationCertificate: watchedValues.registrationCertificate,
                              membersList: watchedValues.membersList,
                              financialRecords: watchedValues.financialRecords,
                              meetingMinutes: watchedValues.meetingMinutes,
                              projectDocuments: watchedValues.projectDocuments
                            }).filter(Boolean).length * 3.33) - ['regularWaterRequest', 'regularWaterTax', 'regularElection', 'regularLogReporting']
                                .reduce((sum, param) => {
                                  const value = watchedValues[param as keyof CircleEvaluationData]
                                  return sum + (value === 'yes' ? 10 : value === 'partial' ? 5 : 0)
                                }, 0) - (watchedValues.selfAssessmentAccurate ? 15 : 0)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Assessment (Max 15):</span>
                            <span className="font-medium">{(watchedValues.selfAssessmentReviewed ? 5 : 0) + (watchedValues.selfAssessmentAccurate ? 10 : 0)}</span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Recommendation */}
                      <div className="bg-gray-50 p-6 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-4">Committee Recommendation</h4>
                        
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-3">
                              Final Recommendation *
                            </label>
                            <div className="space-y-2">
                              <label className="flex items-center p-3 border border-green-300 rounded-lg cursor-pointer hover:bg-green-50">
                                <input
                                  type="radio"
                                  {...register('recommendation', { required: 'Recommendation is required' })}
                                  value="recommended"
                                  className="mr-3 text-green-600"
                                />
                                <div>
                                  <div className="font-medium text-green-700 flex items-center">
                                    <ThumbsUp className="w-4 h-4 mr-1" />
                                    Recommended
                                  </div>
                                  <div className="text-sm text-green-600">Forward to Corporation Committee</div>
                                </div>
                              </label>

                              <label className="flex items-center p-3 border border-yellow-300 rounded-lg cursor-pointer hover:bg-yellow-50">
                                <input
                                  type="radio"
                                  {...register('recommendation')}
                                  value="conditionally_recommended"
                                  className="mr-3 text-yellow-600"
                                />
                                <div>
                                  <div className="font-medium text-yellow-700 flex items-center">
                                    <AlertCircle className="w-4 h-4 mr-1" />
                                    Conditionally Recommended
                                  </div>
                                  <div className="text-sm text-yellow-600">Forward with conditions</div>
                                </div>
                              </label>

                              <label className="flex items-center p-3 border border-red-300 rounded-lg cursor-pointer hover:bg-red-50">
                                <input
                                  type="radio"
                                  {...register('recommendation')}
                                  value="not_recommended"
                                  className="mr-3 text-red-600"
                                />
                                <div>
                                  <div className="font-medium text-red-700 flex items-center">
                                    <ThumbsDown className="w-4 h-4 mr-1" />
                                    Not Recommended
                                  </div>
                                  <div className="text-sm text-red-600">Do not forward</div>
                                </div>
                              </label>
                            </div>
                            {errors.recommendation && (
                              <p className="mt-1 text-sm text-red-600">{errors.recommendation.message}</p>
                            )}
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              Remarks *
                            </label>
                            <textarea
                              {...register('recommendationRemarks', { 
                                required: 'Recommendation remarks are required',
                                minLength: { value: 20, message: 'Remarks must be at least 20 characters' }
                              })}
                              rows={4}
                              className="government-input"
                              placeholder="Provide detailed remarks for your recommendation..."
                            />
                            {errors.recommendationRemarks && (
                              <p className="mt-1 text-sm text-red-600">{errors.recommendationRemarks.message}</p>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Navigation Buttons */}
                <div className="flex justify-between items-center pt-6 border-t">
                  <button
                    type="button"
                    onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
                    disabled={currentStep === 0}
                    className="px-4 py-2 bg-gray-300 hover:bg-gray-400 disabled:bg-gray-200 disabled:cursor-not-allowed text-gray-700 rounded-lg transition-colors"
                  >
                    Previous Step
                  </button>

                  <button
                    type="button"
                    onClick={saveProgress}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Save Draft
                  </button>

                  {currentStep < steps.length - 1 ? (
                    <button
                      type="button"
                      onClick={() => setCurrentStep(Math.min(steps.length - 1, currentStep + 1))}
                      className="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors"
                    >
                      Next Step
                    </button>
                  ) : (
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="government-button flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Submitting...
                        </>
                      ) : (
                        <>
                          <Send className="h-4 w-4 mr-2" />
                          Submit Evaluation
                        </>
                      )}
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}